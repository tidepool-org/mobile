patch-package
--- a/node_modules/react-native-walkthrough-tooltip/src/geom.js
+++ b/node_modules/react-native-walkthrough-tooltip/src/geom.js
@@ -21,12 +21,12 @@ class Rect {
   }
 }
 
-const computeTopGeometry = ({ displayArea, childRect, contentSize, arrowSize }) => {
+const computeTopGeometry = ({ displayArea, childRect, contentSize, arrowSize, tooltipOriginOffset = { x: 0, y: 0 } }) => {
   const tooltipOrigin = new Point(
     Math.min(displayArea.x + displayArea.width - contentSize.width,
-      Math.max(displayArea.x, childRect.x + (childRect.width - contentSize.width) / 2)),
-    childRect.y - contentSize.height - arrowSize.height);
-  const anchorPoint = new Point(childRect.x + childRect.width / 2.0, childRect.y);
+      Math.max(displayArea.x, childRect.x + (childRect.width - contentSize.width) / 2)) + tooltipOriginOffset.x,
+    childRect.y - contentSize.height - arrowSize.height + tooltipOriginOffset.y);
+  const anchorPoint = new Point(childRect.x + childRect.width / 2.0 + tooltipOriginOffset.x, childRect.y + tooltipOriginOffset.y);
 
   return {
     tooltipOrigin,
@@ -35,14 +35,14 @@ const computeTopGeometry = ({ displayArea, childRect, contentSize, arrowSize })
   };
 };
 
-const computeBottomGeometry = ({ displayArea, childRect, contentSize, arrowSize }) => {
+const computeBottomGeometry = ({ displayArea, childRect, contentSize, arrowSize, tooltipOriginOffset = { x: 0, y: 0 } }) => {
   const tooltipOrigin = new Point(
     Math.min(displayArea.x + displayArea.width - contentSize.width,
-      Math.max(displayArea.x, childRect.x + (childRect.width - contentSize.width) / 2)),
-    childRect.y + childRect.height + arrowSize.height);
+      Math.max(displayArea.x, childRect.x + (childRect.width - contentSize.width) / 2)) + tooltipOriginOffset.x,
+    childRect.y + childRect.height + arrowSize.height + tooltipOriginOffset.y);
   const anchorPoint = new Point(
-    childRect.x + childRect.width / 2.0,
-    childRect.y + childRect.height
+    childRect.x + childRect.width / 2.0 + tooltipOriginOffset.x,
+    childRect.y + childRect.height + tooltipOriginOffset.y
   );
 
   return {
@@ -52,11 +52,11 @@ const computeBottomGeometry = ({ displayArea, childRect, contentSize, arrowSize
   };
 };
 
-const computeLeftGeometry = ({ displayArea, childRect, contentSize, arrowSize }) => {
-  const tooltipOrigin = new Point(childRect.x - contentSize.width - arrowSize.width,
+const computeLeftGeometry = ({ displayArea, childRect, contentSize, arrowSize, tooltipOriginOffset = { x: 0, y: 0 } }) => {
+  const tooltipOrigin = new Point(childRect.x - contentSize.width - arrowSize.width + tooltipOriginOffset.x,
     Math.min(displayArea.y + displayArea.height - contentSize.height,
-      Math.max(displayArea.y, childRect.y + (childRect.height - contentSize.height) / 2)));
-  const anchorPoint = new Point(childRect.x, childRect.y + childRect.height / 2.0);
+      Math.max(displayArea.y, childRect.y + (childRect.height - contentSize.height) / 2)) + tooltipOriginOffset.y);
+  const anchorPoint = new Point(childRect.x + tooltipOriginOffset.x, childRect.y + childRect.height / 2.0 + tooltipOriginOffset.y);
 
   return {
     tooltipOrigin,
@@ -65,13 +65,13 @@ const computeLeftGeometry = ({ displayArea, childRect, contentSize, arrowSize })
   };
 };
 
-const computeRightGeometry = ({ displayArea, childRect, contentSize, arrowSize }) => {
-  const tooltipOrigin = new Point(childRect.x + childRect.width + arrowSize.width,
+const computeRightGeometry = ({ displayArea, childRect, contentSize, arrowSize, tooltipOriginOffset = { x: 0, y: 0 } }) => {
+  const tooltipOrigin = new Point(childRect.x + childRect.width + arrowSize.width + tooltipOriginOffset.x,
     Math.min(displayArea.y + displayArea.height - contentSize.height,
-      Math.max(displayArea.y, childRect.y + (childRect.height - contentSize.height) / 2)));
+      Math.max(displayArea.y, childRect.y + (childRect.height - contentSize.height) / 2)) + tooltipOriginOffset.y);
   const anchorPoint = new Point(
-    childRect.x + childRect.width,
-    childRect.y + childRect.height / 2.0
+    childRect.x + childRect.width + tooltipOriginOffset.x,
+    childRect.y + childRect.height / 2.0 + tooltipOriginOffset.y
   );
 
   return {
--- a/node_modules/react-native-walkthrough-tooltip/src/tooltip.js
+++ b/node_modules/react-native-walkthrough-tooltip/src/tooltip.js
@@ -236,6 +236,7 @@ class Tooltip extends Component {
       childRect: this.state.childRect,
       arrowSize: this.getArrowSize(innerPlacement),
       contentSize,
+      tooltipOriginOffset: this.props.tooltipOriginOffset,
     };
 
     switch (innerPlacement) {
@@ -464,6 +465,7 @@ Tooltip.defaultProps = {
   onChildPress: null,
   onClose: null,
   placement: 'auto',
+  tooltipOriginOffset: undefined,
 };
 
 Tooltip.propTypes = {
@@ -478,6 +480,7 @@ Tooltip.propTypes = {
   onChildPress: PropTypes.func,
   onClose: PropTypes.func,
   placement: PropTypes.string,
+  tooltipOriginOffset: PropTypes.object,
 };
 
 export default Tooltip;
\ No newline at end of file
